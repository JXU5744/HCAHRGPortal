@model HCAaudit.Service.Portal.AuditUI.ViewModel.AuditViewModel
@{
    ViewData["Title"] = "Audit Page";
}

<script src="~/lib/jquery/jquery.min.js"></script>

<link href="~/css/font-awesome.min.css" rel="stylesheet" />
<link href="~/css/bootstrap-multiselect.css" rel="stylesheet" />
<link href="~/css/bootstrap-datepicker.min.css" rel="stylesheet" />
<link href="~/lib/DataTables/DataTables/css/dataTables.bootstrap4.min.css" rel="stylesheet" />
<link href="~/css/responsive.bootstrap4.min.css" rel="stylesheet" />

<script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
<script src="~/js/bootstrap-multiselect.min.js"></script>
<script src="~/js/bootstrap-datepicker.min.js"></script>
<script src="~/js/jquery-ui.js"></script>
<script src="~/lib/DataTables/DataTables/js/jquery.dataTables.min.js"></script>
<script src="~/lib/DataTables/DataTables/js/dataTables.bootstrap4.min.js"></script>

<meta name="viewport" content="width=device-width, initial-scale=1">

<div class="row neu-margin--bottom-16">
    <div class="col-12">
        <h3 align="center" class="neu-text--h3 neu-text--bold align-content-xl-center">Audit</h3>
    </div>
</div>

<form id="AuditDetails" method="post" asp-controller="Audit" asp-action="SaveAudit" class="form-inline neu-margin--bottom-16">
    <div class="card">
        <div class="row">
            <div class="col-sm-3">
                <label for="TicketId" class="neu-input__label">Ticket ID</label>
                @Html.TextBoxFor(m => m.TicketId, new { @disabled = true, @class = "neu-input__field" })
                @Html.HiddenFor(m => m.TicketId)
            </div>
            <div class="col-sm-3">
                <label for="Agent34Id" class="neu-input__label">Agent's 3-4 ID</label>
                @Html.TextBoxFor(m => m.Agent34Id, new { @disabled = true, @class = "neu-input__field" })
                @Html.HiddenFor(m => m.Agent34Id)
            </div>
            <div class="col-sm-3">
                <label for="AgentName" class="neu-input__label">Agent Name</label>
                @Html.TextBoxFor(m => m.AgentName, new { @disabled = true, @class = "neu-input__field" })
                @Html.HiddenFor(m => m.AgentName)
                @Html.HiddenFor(m => m.AuditorName)
                @Html.HiddenFor(m => m.EnvironmentType)

            </div>
            <div class="col-sm-3">
                <label for="TicketDate" class="neu-input__label">Record Date</label>
                @Html.TextBoxFor(m => m.TicketDate, new { @disabled = true, @class = "neu-input__field" })
                @Html.HiddenFor(m => m.TicketDate)
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <label for="SupervisorName" class="neu-input__label">Supervisor</label>
                @Html.TextBoxFor(m => m.SupervisorName, new { @disabled = true, @class = "neu-input__field" })
                @Html.HiddenFor(m => m.SupervisorName)
            </div>
            <div class="col-sm-3">
                <label for="ServiceGroupName" class="neu-input__label">Service Group</label>
                @Html.TextBoxFor(m => m.ServiceGroupName, new { @disabled = true, @class = "neu-input__field" })
                @Html.HiddenFor(m => m.ServiceCatId)
            </div>
            <div class="col-sm-3">
                <label for="SubCatName" class="neu-input__label">Sub Group</label>
                @Html.TextBoxFor(m => m.SubCatName, new { @disabled = true, @class = "neu-input__field" })
                @Html.HiddenFor(m => m.SubCatId)
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <table id="auditDetails" class="neu-table neu-margin--vert-16" width="100%" cellspacing="0">
                    <thead class="neu-table__head">
                        <tr class="neu-table__header neu-table__sort-icon" style="text-align:center">
                            <th style="width:5%;text-align:center" rowspan="2">Question Sequence</th>
                            <th style="width:40%;text-align:center" rowspan="2">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Question Description</th>
                            <th style="width:28%;text-align:center" colspan="3">Action</th>
                            <th style="width:5%;text-align:center" rowspan="2">Correction Required</th>
                            <th style="width:22%;text-align:center" rowspan="2">Comment</th>
                        </tr>
                        <tr>
                            <th>Compliance</th>
                            <th>Non Compliance</th>
                            <th>Not Applicable</th>
                        </tr>
                    </thead>
                    @for (int i = 0; i < Model.Question.Count; i++)
                    {
                        <tr class="neu-table__row--large neu-table__row--striped">
                            <td>
                                <div align="center">
                                    @Model.Question[i].QuestionSequence
                                    @Html.HiddenFor(m => m.Question[i].QuestionSequence)
                                    @Html.HiddenFor(m => m.Question[i].QuestionId)
                                    @Html.HiddenFor(m => m.Question[i].QuestionName)
                                </div>
                            </td>
                            <td>
                                @Html.TextAreaFor(m => m.Question[i].QuestionDescription, 5, 60, new { style = "resize:none", @disabled = true })
                            </td>
                            <td colspan="3">
                                <div id="action">
                                    <div id="actionTable" class="row">
                                        <div class="col-sm-4 neu-text--align-center">
                                            @Html.CheckBoxFor(m => m.Question[i].Action.IsCompliance, new { id = Model.Question[i].QuestionId + "-compliance", @class = "actioncheck", title = Model.Question[i].QuestionId + "-action" })
                                        </div>
                                        <div class="col-sm-4 neu-text--align-center">
                                            @Html.CheckBoxFor(m => m.Question[i].Action.IsNonCompliance, new { id = Model.Question[i].QuestionId + "-noncompliance", @class = "actioncheck", title = Model.Question[i].QuestionId + "-action" })
                                            <div class="row neu-padding--top-10" style="border-top: 1px solid #ddd;display:none" id="@Model.Question[i].QuestionId-tblNonCompliance">
                                                <div class="col-sm-12">
                                                    @Html.CheckBoxFor(m => m.Question[i].Action.Impact.IsHighImpact, new { id = Model.Question[i].QuestionId + "-Impact", @class = "chkimpact", title = Model.Question[i].QuestionId + "-Impact" })
                                                    <span style="width:30px;display:inline-block"></span>
                                                    @Html.CheckBoxFor(m => m.Question[i].Action.Impact.IsLowImpact, new { id = Model.Question[i].QuestionId + "-Impact", @class = "chkimpact", title = Model.Question[i].QuestionId + "-Impact" })
                                                </div>
                                                <div>
                                                    <label>High</label>
                                                    <span style="width:30px;display:inline-block"></span>
                                                    <label>Low</label>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-4 neu-text--align-center">
                                            @Html.CheckBoxFor(m => m.Question[i].Action.IsNotApplicable, new { id = Model.Question[i].QuestionId + "-notapplicable", @class = "actioncheck", title = Model.Question[i].QuestionId + "-action" })
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td>
                                @Html.CheckBoxFor(m => m.Question[i].CorrectionRequire, new { id = Model.Question[i].QuestionId + "-correction",  name="optradio", title = Model.Question[i].QuestionId + "-correction" })
                            </td>
                            <td>
                                @Html.TextAreaFor(m => m.Question[i].Comments, 5, 28, new { style = "resize:none", @disabled = true })
                            </td>
                        </tr>
                    }
                </table>
            </div>
        </div>
    </div>
    <div class="form-group">
        <label for="auditnotes" class="text-primary">Audit Notes:</label>
        @Html.TextAreaFor(m => m.AuditNote, new { rows = "4", style = "resize:none;width:100%" })

        <div class="row neu-margin--bottom-16">
            <div class="col-sm-12 d-flex justify-content-center">
                <span id="errormsgformandatory" class="neu-button--danger"> </span>
            </div>
        </div>

        <div class="row">
            <div class="col-sm-12 neu-text--align-center">
                <button id="btnAnswerYes" class="neu-button--primary neu-button neu-button--raised">Save</button>
                <button id="btncancelpopupedit" class="neu-button--danger neu-button neu-button--raised neu-margin--left-10" onclick="return OpenCancelPopUp(); return false;">Cancel</button>
            </div>
        </div>
    </div>

    <div id="PopUpSuccess" title="Audit Successful " hidden="hidden" class="container">
        <div class="row neu-margin--bottom-16">
            <div class="col-sm-12">
                <label class="neu-input__label" for="SuccessMessage"> Audit Successfully Submitted.</label>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 neu-text--align-center">
                <button id="btnOK" class="neu-button--primary neu-button neu-button--raised">OK</button>
            </div>
        </div>
    </div>

    <div id="PopUpCancel" title="Cancel Audit" hidden="hidden" class="container">
        <div class="row neu-margin--bottom-16">
            <div class="col-sm-12">
                <label class="neu-input__label" for="AuditorQuitReasonId"> Cancellation Reason </label>
                @Html.DropDownListFor(x => x.AuditorQuitReasonId, Model.CancellationReason, new { @class = "neu-select" })
                <span id="errormsg" class="neu-button--danger neu-button--small"></span>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 neu-text--align-center">
                <button id="btnCancelAudit" class="neu-button--primary neu-button neu-button--raised">Save</button>
                <button id="btncancelpopup" class="neu-button--danger neu-button neu-button--raised neu-margin--left-10">Cancel</button>
            </div>
        </div>
    </div>
</form>

<!-- Script for the date range picker -->
<script type="text/javascript" src="~/js/daterangepicker.js"></script>
<link rel="stylesheet"
      type="text/css"
      href="~/css/daterangepicker.css" />
<!-- Script for the date range picker -->
<script type="text/javascript">

    $(function () {
        $("#popupcontent").dialog({
            width: 800,
            autoOpen: false,
            draggable: false,
            resizable: false,
        });

        $("#btnopenPopUp").click(function () {
            $("#popupcontent").dialog({
                position: 'bottom'
            });
        });

        $("#btncancelpopup").click(function () {
            $("#popupcontent").dialog('close');
        });
    })

    function OpenCancelPopUp() {
        $("#PopUpCancel").dialog({
            width: 500,
            height: 'auto',
            autoOpen: false,
            draggable: false,
            resizable: false,
        });
        $('#errormsg').hide();
        $('.ui-dialog-titlebar-close').hide();
        $("#PopUpCancel").dialog('open');
        return false;
    }

    $("#btncancelpopup").click(function () {
        $("#PopUpCancel").dialog('close');
    });

    $("#btnCancelAudit").click(function () {
        if ($('#AuditorQuitReasonId').val() == 0) {
            $('#errormsg').show();
            $('#errormsg').text('Please select cancel reason');
            return false;
        }

        var auditparameters = {
            "TicketID": $('#TicketId').val(),
            "Agent34ID": $('#Agent34Id').val(),
            "AgentName": $('#AgentName').val(),
            "AuditorName": $('#AuditorName').val(),
            "EnvironmentType": $('#EnvironmentType').val(),
            "ServiceCatId": $('#ServiceCatId').val(),
            "SubCatId": $('#SubCatId').val(),
            "TicketDate": $('#TicketDate').val(),
            "AuditorQuitReasonId": $('#AuditorQuitReasonId').val()
        };

        $.ajax({
            type: "POST",
            url: "/Audit/CancelAudit",
            data: { "audit": auditparameters },
            success: function (response) {
                if (response == "1") {
                    alert("Please select valid value");
                }
                else {
                    $("#PopUpCancel").dialog('close');
                    window.location.replace("/Search/Index");
                }
            },

            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
    });

    $('.actioncheck').click(function () {
        var $this = $(this);
        var name = $(this).attr("id");
        var questionId = name.substring(0, name.indexOf("-"));

        $('[title=' + questionId + '-action' + ']').not(this).prop('checked', false);

        if ($("#" + questionId + "-noncompliance").prop('checked') == true) {
            $("#" + questionId + "-tblNonCompliance").show();
        }
        else {
            $("#" + questionId + "-tblNonCompliance").hide();
            $("#" + questionId + "-Impact").prop('checked', false);
        }

        if (name.indexOf('noncompliance') > -1) {
            if ($this.prop('checked')) {
                $this.closest("tr:not(:has(>td>table))").find("input[type=checkbox][name ='optradio']").removeAttr("disabled");
                $this.closest("tr:not(:has(>td>table))").find("[name$='Comments']").removeAttr("disabled");
            }
            else {
                $this.closest("tr:not(:has(>td>table))").find("input[type=checkbox][name ='optradio']").attr("disabled", true);
                $this.closest("tr:not(:has(>td>table))").find("[name$='Comments']").prop("disabled", true);
            }
        }
        else {
            $this.closest("tr:not(:has(>td>table))").find("input[type=checkbox][name ='optradio']").attr("disabled", true);
            $this.closest("tr:not(:has(>td>table))").find("[name$='Comments']").prop("disabled", true);
        }
    });
    $('.chkimpact').click(function () {
        var name = $(this).attr("id");
        var questionId = name.substring(0, name.indexOf("-"));
        $('[title=' + questionId + '-Impact' + ']').not(this).prop('checked', false);
    });

    $('form').submit(function (e) {
        var isActionSelected = false;
        var isimpactChecked = false
        var isAuditCommentsEntered = false;

        $("div[id$='actionTable']").each(function () {
            $this = $(this).find("div");

            var comp = $this.find("input[type=checkbox][name$='IsCompliance']");
            var nonComp = $this.find("input[type=checkbox][name$='IsNonCompliance']");
            var notApp = $this.find("input[type=checkbox][name$='IsNotApplicable']");

            if (comp.prop("checked") == false && nonComp.prop("checked") == false && notApp.prop("checked") == false) {
                isActionSelected = true;
            }

            if (nonComp.prop("checked")) {
                var high = nonComp.closest("table tr").find("input[type=checkbox][name$='IsHighImpact']");
                var low = nonComp.closest("table tr").find("input[type=checkbox][name$='IsLowImpact']");

                if (high.prop("checked") == false && low.prop("checked") == false) {
                    isimpactChecked = true;
                }

                var tempcomment  = nonComp.closest("tr:not(:has(>td>table))").find("[name$='Comments']").val();
                if (tempcomment.length <= 0) {
                    isAuditCommentsEntered = true;
                }
            }
        });

        if (isActionSelected) {
            $("#errormsgformandatory").text("Please select action for all questions.");
            e.preventDefault();
        }
        else if (isimpactChecked) {
            $("#errormsgformandatory").text("Please select Impact for selected Non-Compliances.");
            e.preventDefault();
        }
        else if (isAuditCommentsEntered) {
            $("#errormsgformandatory").text("Please enter comments for selected Non-Compliances.");
            e.preventDefault();
        }
    });
</script>

@if (!string.IsNullOrEmpty(ViewBag.Success))
{
    <script>
        $(document).ready(function () {
            $(function () {
                $("#PopUpSuccess").dialog({
                    width: 'auto',
                    height: 'auto',
                    autoOpen: false,
                    draggable: false,
                    resizable: false,
                });
                $("#PopUpSuccess").dialog('open');
                $("#btnOK").click(function () {
                    $("#PopUpSuccess").dialog('close');
                    window.location.href = "/Search/Index"
                });
            })
        });
    </script>
}
